{"version":3,"sources":["../src/mongodb-database.js"],"names":["connect","options","MongoClient","uri","native_parser","MongoDBQuery","params","Array","isArray","args","findManyById","id","findById","query","databases","projection","models","mongodb","TABLE","table","obj","then","Promise","resolve","reject","db","collection","find","toArray","err","docs","cache","cacheKey","_id","checkCache","load","key","data","findOne","doc","catch","error","add","value","notCached","cached","map","item","index","push","some","c","$in","val","forEach","MongoDBMutation","cacheName","RESULTS_","result","created","message","insert","response","insertedIds","n","removed","remove","updated","update","get","console","log"],"mappings":"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","file":"mongodb-database.js","sourcesContent":["import mongodb from 'mongodb';\nimport autobind from 'class-autobind';\n\nimport { objectId, queryObjectId } from './mongodb-utils';\n\nexport function connect (options) {\n  return mongodb.MongoClient.connect(options.uri, { native_parser: true });\n}\n\nexport class MongoDBQuery {\n  constructor () {\n    autobind(this);\n  }\n\n  resolve (params) {\n    return Array.isArray(params.args)\n      ? this.findManyById({ ...params, args: { id: params.args } })\n      : this.findById(params);\n  }\n\n  findAll ({ query, args, databases, projection = {}, models }) {\n    const { mongodb } = databases;\n    const TABLE = this.table;\n    const obj = args || query;\n\n    return mongodb.then(db => {\n      return new Promise((resolve, reject) => {\n        return db\n          .collection(TABLE)\n          .find(queryObjectId(obj), projection)\n          .toArray((err, docs) => {\n            if (err) {\n              reject(err);\n            } else {\n              resolve(docs);\n            }\n          });\n      });\n    });\n  }\n\n  findById ({ query, args, databases, projection = {}, models, cache }) {\n    const { mongodb } = databases;\n    const TABLE = this.table;\n    const obj = args || query;\n\n    if (obj == null) return null;\n\n    // check to see if document is in cached\n    const cacheKey = `${this.table}${obj._id}`;\n    const checkCache = cache.load({ key: cacheKey });\n    if (checkCache) return checkCache;\n\n    const data = mongodb.then(db =>\n      db\n        .collection(TABLE)\n        .findOne(queryObjectId(args), projection)\n        .then(doc => {\n          return doc;\n        })\n        .catch(error => error)\n    );\n\n    cache.add({\n      key: cacheKey,\n      value: data\n    });\n\n    return data;\n  }\n\n  findManyById ({ query, args, databases, projection = {}, models, cache }) {\n    const { mongodb } = databases;\n    const TABLE = this.table;\n    const obj = args || query;\n\n    if (obj == null) return null;\n\n    const notCached = [];\n\n    // check if any of the query documents are in the cache\n    const cached = obj._id.map((item, index) => {\n      const cacheKey = `${this.table}_${item}`;\n      const checkCache = cache.load({ key: cacheKey });\n\n      if (checkCache) return checkCache;\n\n      notCached.push({ index, item });\n    });\n\n    // if all documents are already in the cache return the cache\n    if (!cached.some(c => c == null)) return cached;\n\n    // find non-cached documents\n    return mongodb.then(db => {\n      return new Promise((resolve, reject) =>\n        db\n          .collection(TABLE)\n          .find(\n          {\n            ...args,\n            _id: {\n              $in: notCached.map(val => objectId(val.item))\n            }\n          },\n            projection\n          )\n          .toArray((err, docs) => {\n            if (err) return reject(err);\n\n            // add non-cached documents to the cache\n            notCached.forEach((value, index) => {\n              const cacheKey = `${this.table}_${value.item}`;\n\n              // add item to cache\n              cache.add({\n                key: cacheKey,\n                value: docs[index]\n              });\n\n              // insert not cached documents into cached\n              cached[value.index] = docs[index];\n            });\n\n            return resolve(cached);\n          })\n      );\n    });\n  }\n}\n\nexport class MongoDBMutation {\n  constructor () {\n    autobind(this);\n    this.cacheName = 'user_';\n  }\n\n  create ({ query, args, databases, models, cache }) {\n    const { mongodb } = databases;\n    let obj = args || query;\n    const TABLE = this.table;\n\n    if (obj == null || obj._id == null) {\n      return {\n        RESULTS_: {\n          result: 'failed',\n          created: 0,\n          error: {\n            message: 'No data supplied.'\n          }\n        }\n      };\n    }\n\n    return new Promise((resolve, reject) =>\n      mongodb.then(db => {\n        return db\n          .collection(TABLE)\n          .insert(obj)\n          .then(response => {\n            const id = response.insertedIds;\n            const data = { ...obj, id };\n\n            // add the document to the store\n            cache.add({\n              key: `${this.table}_${id}`,\n              value: data\n            });\n            resolve({\n              id,\n              RESULTS_: {\n                result: 'ok',\n                created: response.result.n\n              }\n            });\n          })\n          .catch(error => error);\n      })\n    );\n  }\n\n  remove ({ query, args, databases, models, cache }) {\n    const { mongodb } = databases;\n    let obj = args || query;\n    const TABLE = this.table;\n\n    if (obj == null || obj._id == null) {\n      return {\n        _id: obj._id,\n        RESULTS_: {\n          result: 'failed',\n          removed: 0,\n          error: {\n            message: 'No id supplied.'\n          }\n        }\n      };\n    }\n\n    const _id = obj._id;\n\n    return mongodb.then(db => {\n      return db\n        .collection(TABLE)\n        .remove({ _id: objectId(_id) })\n        .then(response => {\n          cache.remove({ key: `${this.table}_${_id}` });\n\n          return {\n            _id,\n            result: response.result.n > 0 ? 'ok' : 'failed',\n            removed: response.result.n\n          };\n        });\n    });\n  }\n\n  update ({ query, args, databases, models, cache }) {\n    const { mongodb } = databases;\n    const TABLE = this.table;\n    let obj = (args && { ...args }) || (query && { ...query });\n    const _id = obj._id;\n\n    delete obj._id;\n\n    if (obj == null) {\n      return {\n        RESULTS_: {\n          result: 'failed',\n          updated: 0,\n          error: {\n            message: 'No data supplied.'\n          }\n        }\n      };\n    }\n\n    return mongodb.then(db => {\n      return db\n        .collection(TABLE)\n        .update({ _id: objectId(_id) }, obj)\n        .then(response => {\n          const cacheKey = `${this.table}_${_id}`;\n          const checkCache = cache.get({ key: cacheKey });\n          const data = checkCache ? { ...checkCache, ...obj } : obj;\n\n          cache.add({\n            key: cacheKey,\n            value: data\n          });\n\n          const error = response.result.n === 0\n            ? { message: 'No data supplied.' }\n            : null;\n\n          return {\n            _id,\n            RESULTS_: {\n              result: response.result.n > 0 ? 'ok' : 'failed',\n              updated: response.result.n,\n              error\n            }\n          };\n        })\n        .catch(error => {\n          console.log(error);\n          return {\n            RESULTS_: {\n              result: 'failed',\n              updated: 0,\n              error: {\n                message: 'Document update failed.'\n              }\n            }\n          };\n        });\n    });\n  }\n\n  // createMany\n  // deleteMany\n  // removeMany\n  // updateMany\n}\n"]}